{"version":3,"sources":["webpack://MultiDial/webpack/universalModuleDefinition","webpack://MultiDial/webpack/bootstrap","webpack://MultiDial/./src/index.js","webpack://MultiDial/./src/MultiDial.js"],"names":["MultiDial","require","default","module","exports","container","numberDials","radius","multiDialOffset","individualDialOpts","dialX","dialY","dialComponentClass","dialPathClass","dialTextClass","dialCurrentClass","viewBox","defaultColor","defaultStroke","defaultInitialValue","defaultLineCap","defaultArc","defaultOrientation","defaultMaxValue","defaultMinValue","defaultColorSchedule","value","label","val","Math","round","normalizeAngle","SVG_ORIG","_container","document","getElementById","dials","buildSVG","tag","opts","nestedDials","svg","createElementNS","opt","setAttribute","forEach","dial","appendChild","getAngle","percentage","arcAngle","checkUserProp","prop","defaultProp","hasOwnProperty","limitValue","min","max","Number","getValueInPercentage","newMax","newVal","getCartesianPoints","centerX","centerY","angle","rad","PI","x","cos","y","sin","getDialCoords","startAngle","endAngle","cx","cy","end","start","pathString","useLargeArc","coords","largeArcFlag","join","animateDial","options","duration","currentIteration","iterations","change","step","easing","easeInOutCubic","pos","pow","animate","progress","requestAnimationFrame","updateDial","svg_text","svg_path","minValue","maxValue","abs","textContent","setColor","ring","color","dur","pathTransition","style","stroke","transition","initializeDial","i","orientation","arc","lineCap","colorSchedule","strokeOffset","slice","map","e","reduce","a","c","newRadius","dialText","fill","class","currentValue","dialPath","d","type","dialCurrent","push","dialComplete","init","setDialValue","console","log","frame","returnTestString","thisString"],"mappings":"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","file":"multiDial-0.0.3.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MultiDial\"] = factory();\n\telse\n\t\troot[\"MultiDial\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const MultiDial = require('./MultiDial').default;\r\n\r\nmodule.exports =  MultiDial;\r\n","function MultiDial({\r\n  container = \"multidial\",\r\n  numberDials = 1,\r\n  radius = 40,\r\n  multiDialOffset = 1,\r\n  individualDialOpts = [],\r\n\r\n  dialX = 50,\r\n  dialY = 50,\r\n  dialComponentClass = \"dial-component\",\r\n  dialPathClass = \"dial-path\",\r\n  dialTextClass = \"dial-text\",\r\n  dialCurrentClass = \"dial-current\",\r\n  viewBox = \"0 0 100 100\",\r\n\r\n  //defaults for all dials if individual values not set\r\n  defaultColor = \"#ffffff\",\r\n  defaultStroke = 2,\r\n  defaultInitialValue = 0,\r\n  defaultLineCap = \"round\", //[round | butt | square]\r\n  defaultArc = 300,\r\n  defaultOrientation = 0,\r\n  defaultMaxValue = 100,\r\n  defaultMinValue = 0,\r\n  defaultColorSchedule = function(value) {\r\n    switch (true) {\r\n      case value < 25:\r\n        return \"blue\";\r\n      case value >= 25 && value < 50:\r\n        return \"green\";\r\n      case value >= 50 && value < 75:\r\n        return \"yellow\";\r\n      case value >= 75:\r\n        return \"red\";\r\n    }\r\n  },\r\n\r\n  label = function(val) {\r\n    return Math.round(val);\r\n  }\r\n}) {\r\n  /**\r\n   * Normalizes the angle to between 0 and 359\r\n   * @param {Nnteger} value - angle\r\n   * @return {number} - Normalized angle\r\n   */\r\n  const normalizeAngle = value => {\r\n    if (value >= 0 && value < 360) return value;\r\n    if (value > 359) return value - 360;\r\n    if (value < 0) return 360 + value;\r\n  };\r\n\r\n  const SVG_ORIG = \"http://www.w3.org/2000/svg\";\r\n\r\n  let _container = document.getElementById(container),\r\n    dials = [];\r\n\r\n  /**\r\n   * Creates SVG DOM element - including nesting dials, text etc.  Returns single SVGElement\r\n   * @param {String} tag The SVG element type name\r\n   * @param {Object} opts The svg attributes\r\n   * @param {Array} nestedDials An array of nested dials or text\r\n   * @return {SVGElement} The SVG element\r\n   */\r\n  const buildSVG = ({ tag, opts, nestedDials }) => {\r\n    let svg = document.createElementNS(SVG_ORIG, tag);\r\n\r\n    for (var opt in opts) {\r\n      svg.setAttribute(opt, opts[opt]);\r\n    }\r\n\r\n    if (nestedDials) {\r\n      nestedDials.forEach(function(dial) {\r\n        svg.appendChild(dial);\r\n      });\r\n    }\r\n\r\n    return svg;\r\n  };\r\n\r\n  /**\r\n   * Translates percentage value to angle. e.g. If gauge span angle is 180deg, then 50%\r\n   * will be 90deg\r\n   */\r\n  const getAngle = (percentage, arcAngle) => {\r\n    return (percentage * arcAngle) / 100;\r\n  };\r\n\r\n  /**\r\n   * Checks if user has entered a custom value for a given property on a given dial\r\n   * If not then default value applied\r\n   * @param {Objectr} opts - User created options for each dial\r\n   * @param {String} prop - Property to check\r\n   * @param {*} defaultProp - Default property to apply\r\n   */\r\n  const checkUserProp = (opts, prop, defaultProp) => {\r\n    return opts && opts.hasOwnProperty(prop) ? opts[prop] : defaultProp;\r\n  };\r\n\r\n  /**\r\n   * Limits value generated to given min/max values set by user\r\n   */\r\n  const limitValue = (value, min, max) => {\r\n    var val = Number(value);\r\n    if (val > max) return max;\r\n    if (val < min) return min;\r\n    return val;\r\n  };\r\n\r\n  /**\r\n   * Changes given value to percentage based on min / max\r\n   */\r\n  const getValueInPercentage = (value, min, max) => {\r\n    var newMax = max - min,\r\n      newVal = value - min;\r\n    return (100 * newVal) / newMax;\r\n  };\r\n\r\n  /**\r\n   * Gets cartesian points for a specified radius and angle (in degrees)\r\n   * @param {Number} centerX  The center x coord\r\n   * @param {Number} centerY  The center y coord\r\n   * @param {Number} radius  The radius of the circle\r\n   * @param {Number} angle The angle in degrees\r\n   * @return {Object} An object with x,y coords\r\n   */\r\n  const getCartesianPoints = (centerX, centerY, radius, angle) => {\r\n    var rad = (angle * Math.PI) / 180;\r\n    return {\r\n      x: Math.round((centerX + radius * Math.cos(rad)) * 1000) / 1000,\r\n      y: Math.round((centerY + radius * Math.sin(rad)) * 1000) / 1000\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Takes in radius and start and end angles and returns x,y points for start and end of dial\r\n   * @param {Number} radius radis of circle\r\n   * @param {Number} startAngle angle of start point\r\n   * @param {Number} endAngle andgle of end point\r\n   * @return {Object} AN oject with x,y values for start and end points of dial\r\n   */\r\n  const getDialCoords = (radius, startAngle, endAngle) => {\r\n    var cx = dialX,\r\n      cy = dialY;\r\n    return {\r\n      end: getCartesianPoints(cx, cy, radius, endAngle),\r\n      start: getCartesianPoints(cx, cy, radius, startAngle)\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Generates the path string to draw an svg path of the dial radius.  Takes a flag to determeine\r\n   * if drawing the larger or smaller of a given arc on a circle\r\n   * @param {Number} radius - radius of circle\r\n   * @param {Number} startAngle - angle of start point\r\n   * @param {Number} endAngle - angle of end point\r\n   * @param {bool} useLargeArc - boolean the decide to use larger of two given arcs\r\n   * @return {String} An svg path string\r\n   */\r\n  const pathString = (radius, startAngle, endAngle, useLargeArc) => {\r\n    var coords = getDialCoords(radius, startAngle, endAngle),\r\n      start = coords.start,\r\n      end = coords.end,\r\n      largeArcFlag = typeof useLargeArc === \"undefined\" ? 1 : useLargeArc;\r\n\r\n    return [\r\n      \"M\",\r\n      start.x,\r\n      start.y,\r\n      \"A\",\r\n      radius,\r\n      radius,\r\n      0,\r\n      largeArcFlag,\r\n      1,\r\n      end.x,\r\n      end.y\r\n    ].join(\" \");\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param {object} options - Animation options\r\n   * @param {number} options.duration - duration in seconds of anumation\r\n   * @param {number} options.start - start angle of dial\r\n   * @param {number} options.end - end angle of dial\r\n   * @param {function} options.step - fucntion to execute on each anuimation step\r\n   * @param {function} options.easing - function to execute for the type of easing\r\n   */\r\n  const animateDial = options => {\r\n    let duration = options.duration,\r\n      currentIteration = 1,\r\n      iterations = 60 * duration,\r\n      start = options.start || 0,\r\n      end = options.end,\r\n      change = end - start,\r\n      step = options.step,\r\n      easing =\r\n        options.easing ||\r\n        function easeInOutCubic(pos) {\r\n          if ((pos /= 0.5) < 1) return 0.5 * Math.pow(pos, 3);\r\n          return 0.5 * (Math.pow(pos - 2, 3) + 2);\r\n        };\r\n\r\n    function animate() {\r\n      let progress = currentIteration / iterations,\r\n        value = change * easing(progress) + start;\r\n      step(value, currentIteration);\r\n      currentIteration += 1;\r\n\r\n      if (progress < 1) {\r\n        requestAnimationFrame(animate);\r\n      }\r\n    }\r\n    requestAnimationFrame(animate);\r\n  };\r\n\r\n  /**\r\n   * Draws change in dial value\r\n   * @param {Number} value - value to change to\r\n   * @param {SVGElement} svg_text - Text svg element to update\r\n   * @param {SVGElement} svg_path - Path svg element to update\r\n   */\r\n  const updateDial = (value, svg_text, svg_path) => {\r\n    let newVal = getValueInPercentage(\r\n      value,\r\n      svg_path.minValue,\r\n      svg_path.maxValue\r\n    );\r\n    let angle =\r\n      svg_path.startAngle > svg_path.endAngle\r\n        ? normalizeAngle(\r\n            getAngle(\r\n              newVal,\r\n              360 - Math.abs(svg_path.startAngle - svg_path.endAngle)\r\n            )\r\n          )\r\n        : normalizeAngle(\r\n            getAngle(newVal, Math.abs(svg_path.startAngle - svg_path.endAngle))\r\n          );\r\n\r\n    // this is because we are using arc greater than 180deg\r\n    let useLargeArc = angle <= 180 ? 0 : 1;\r\n\r\n    svg_text.textContent = newVal;\r\n\r\n    svg_path.svg.setAttribute(\r\n      \"d\",\r\n      pathString(\r\n        svg_path.radius,\r\n        svg_path.startAngle,\r\n        angle + svg_path.startAngle,\r\n        useLargeArc\r\n      )\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Updates color of dails based on value and colorSchedule\r\n   * @param {Number} value - DIal or text value to change to\r\n   * @param {Number} duration - Duration of animation\r\n   * @param {SVGElement} ring - WHich dial to update\r\n   */\r\n  const setColor = (value, duration, ring) => {\r\n    let color = checkUserProp(\r\n        ring,\r\n        \"colorSchedule\",\r\n        defaultColorSchedule\r\n      )(value),\r\n      dur = duration * 1000,\r\n      pathTransition = \"stroke \" + dur + \"ms ease\";\r\n    // textTransition = \"fill \" + dur + \"ms ease\";\r\n\r\n    ring.svg.style.stroke = color;\r\n    ring.svg.style.transition = pathTransition;\r\n    /*\r\n    gaugeValueElem.style = [\r\n      \"fill: \" + c,\r\n      \"-webkit-transition: \" + textTransition,\r\n      \"-moz-transition: \" + textTransition,\r\n      \"transition: \" + textTransition,\r\n    ].join(\";\");\r\n    */\r\n  };\r\n\r\n  /**\r\n   * Builds each dial and text assoicated with it.\r\n   * Checks for dial specific options and if not found then reverts to global defaults set.\r\n   * Creates object with SVGElement and all user options\r\n   */\r\n  const initializeDial = () => {\r\n    for (let i = 0; i < numberDials; i++) {\r\n      //Check if custom values for dials exist otherwise use defaults\r\n      let orientation =\r\n        checkUserProp(\r\n          individualDialOpts[i],\r\n          \"orientation\",\r\n          defaultOrientation\r\n        ) - 90;\r\n      let stroke = checkUserProp(\r\n        individualDialOpts[i],\r\n        \"stroke\",\r\n        defaultStroke\r\n      );\r\n      let color = checkUserProp(individualDialOpts[i], \"color\", defaultColor);\r\n      let arc = checkUserProp(individualDialOpts[i], \"arc\", defaultArc);\r\n      let lineCap = checkUserProp(\r\n        individualDialOpts[i],\r\n        \"lineCap\",\r\n        defaultLineCap\r\n      );\r\n      let minValue = checkUserProp(\r\n        individualDialOpts[i],\r\n        \"minValue\",\r\n        defaultMinValue\r\n      );\r\n      let maxValue = checkUserProp(\r\n        individualDialOpts[i],\r\n        \"maxValue\",\r\n        defaultMaxValue\r\n      );\r\n      let colorSchedule = checkUserProp(\r\n        individualDialOpts[i],\r\n        \"colorSchedule\",\r\n        defaultColorSchedule\r\n      );\r\n\r\n      //Compensate for stroke width when applying offset for nested dials\r\n      let strokeOffset = individualDialOpts\r\n        .slice(0, i)\r\n        .map(e => {\r\n          return e.hasOwnProperty(\"stroke\") ? e.stroke : defaultStroke;\r\n        })\r\n        .reduce((a, c) => a + c, 0);\r\n\r\n      //Get angles and radii for dials\r\n      let startAngle = normalizeAngle(orientation + (360 - arc) / 2);\r\n      let endAngle = normalizeAngle(startAngle + arc);\r\n      let angle = getAngle(100, 360 - Math.abs(startAngle - endAngle));\r\n      let useLargeArc =\r\n        startAngle < endAngle ? (angle >= 180 ? 0 : 1) : angle <= 180 ? 0 : 1;\r\n      let newRadius = radius - strokeOffset - multiDialOffset * i;\r\n\r\n      /*\r\n        Create svg path and text\r\n      */\r\n      let dialText = {\r\n          svg: buildSVG({\r\n            tag: \"text\",\r\n            opts: {\r\n              x: 50,\r\n              y: 50,\r\n              fill: \"#999\",\r\n              class: dialTextClass,\r\n              \"font-size\": \"100%\",\r\n              \"font-family\": \"sans-serif\",\r\n              \"font-weight\": \"normal\",\r\n              \"text-anchor\": \"middle\",\r\n              \"alignment-baseline\": \"middle\",\r\n              \"dominant-baseline\": \"central\"\r\n            }\r\n          }),\r\n          currentValue: \"\"\r\n        },\r\n        dialPath = {\r\n          svg: buildSVG({\r\n            tag: \"path\",\r\n            opts: {\r\n              class: dialPathClass,\r\n              fill: \"none\",\r\n              stroke: \"#666\",\r\n              \"stroke-width\": 2.5,\r\n              d: pathString(newRadius, startAngle, startAngle) // value of 0\r\n            }\r\n          }),\r\n          startAngle: startAngle,\r\n          endAngle: endAngle,\r\n          radius: newRadius,\r\n          type: \"background Path\"\r\n        },\r\n        dialCurrent = {\r\n          svg: buildSVG({\r\n            tag: \"path\",\r\n            opts: {\r\n              class: dialCurrentClass,\r\n              fill: \"none\",\r\n              stroke: color,\r\n              \"stroke-width\": stroke,\r\n              \"stroke-linecap\": lineCap,\r\n              d: pathString(newRadius, startAngle, endAngle, useLargeArc)\r\n            }\r\n          }),\r\n          startAngle: startAngle,\r\n          endAngle: endAngle,\r\n          radius: newRadius,\r\n          currentValue: defaultInitialValue,\r\n          type: \"Current Value Path\",\r\n          minValue: minValue,\r\n          maxValue: maxValue,\r\n          colorSchedule: colorSchedule\r\n        };\r\n\r\n      dials.push(dialText, dialPath, dialCurrent);\r\n    }\r\n\r\n    //Composes all SVGElements to gether and adds to DOM\r\n    let dialComplete = buildSVG({\r\n      tag: \"svg\",\r\n      opts: {\r\n        viewBox: viewBox || \"0 0 100 100\",\r\n        class: dialComponentClass\r\n      },\r\n      nestedDials: dials.map(e => e.svg)\r\n    });\r\n\r\n    _container.appendChild(dialComplete);\r\n  };\r\n\r\n  const init = () => {\r\n    initializeDial();\r\n  };\r\n\r\n  init();\r\n\r\n  /**\r\n   *   PUBLIC FUNCTIONS\r\n   *\r\n   */\r\n\r\n  return {\r\n    /**\r\n     * setDialValue\r\n     *\r\n     * Update the value of a given dial\r\n     * @param {Number} val - the value to update the dial to\r\n     * @param {Integer} ring - which of the nested dials to update 0 being outside ring\r\n     * @param {boolean} animate - animate change\r\n     * @param {double} duration - the duration in seconds of animate\r\n     */\r\n    setDialValue: (val, ring, animate, duration) => {\r\n      console.log(`Dial: ${ring} - Value: ${val}`);\r\n      let svg_text = dials[3 * ring],\r\n        svg_path = dials[3 * ring + 2],\r\n        value = limitValue(val, svg_path.minValue, svg_path.maxValue);\r\n\r\n      if (defaultColor) {\r\n        setColor(value, duration, svg_path);\r\n      }\r\n\r\n      if (animate) {\r\n        animateDial({\r\n          start: svg_path.currentValue || 0,\r\n          end: value,\r\n          duration: duration || 1,\r\n          step: function(val, frame) {\r\n            svg_path.currentValue = val;\r\n            updateDial(val, svg_text, svg_path);\r\n          }\r\n        });\r\n      } else {\r\n        updateDial(val, svg_text, svg_path);\r\n      }\r\n    },\r\n\r\n    returnTestString: (thisString) =>{\r\n      \r\n    }\r\n  };\r\n}\r\n\r\nexport default MultiDial;\r\n"],"sourceRoot":""}
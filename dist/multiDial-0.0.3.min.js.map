{"version":3,"sources":["webpack://MultiDial/webpack/universalModuleDefinition","webpack://MultiDial/webpack/bootstrap","webpack://MultiDial/./src/index.js","webpack://MultiDial/./src/MultiDial.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","MultiDial","require","default","container","numberDials","radius","multiDialOffset","individualDialOpts","dialX","dialY","dialComponentClass","dialPathClass","dialTextClass","dialCurrentClass","viewBox","defaultColor","defaultStroke","defaultInitialValue","defaultLineCap","defaultArc","defaultOrientation","defaultMaxValue","defaultMinValue","defaultColorSchedule","label","val","Math","round","normalizeAngle","_container","document","getElementById","dials","buildSVG","tag","opts","nestedDials","svg","createElementNS","opt","setAttribute","forEach","dial","appendChild","getAngle","percentage","arcAngle","checkUserProp","prop","defaultProp","getCartesianPoints","centerX","centerY","angle","rad","PI","x","cos","y","sin","pathString","startAngle","endAngle","useLargeArc","coords","cx","cy","end","start","getDialCoords","largeArcFlag","join","updateDial","svg_text","svg_path","newVal","min","max","getValueInPercentage","minValue","maxValue","abs","textContent","orientation","stroke","color","arc","lineCap","colorSchedule","strokeOffset","slice","map","e","reduce","a","newRadius","dialText","fill","class","currentValue","dialPath","type","dialCurrent","push","dialComplete","initializeDial","setDialValue","ring","animate","duration","console","log","Number","limitValue","pathTransition","style","transition","setColor","options","currentIteration","iterations","change","step","easing","pos","pow","requestAnimationFrame","progress","animateDial","frame","returnTestString","thisString"],"mappings":"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","file":"multiDial-0.0.3.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MultiDial\"] = factory();\n\telse\n\t\troot[\"MultiDial\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const MultiDial = require('./MultiDial').default;\r\n\r\nmodule.exports =  MultiDial;\r\n","function MultiDial({\r\n  container = \"multidial\",\r\n  numberDials = 1,\r\n  radius = 40,\r\n  multiDialOffset = 1,\r\n  individualDialOpts = [],\r\n\r\n  dialX = 50,\r\n  dialY = 50,\r\n  dialComponentClass = \"dial-component\",\r\n  dialPathClass = \"dial-path\",\r\n  dialTextClass = \"dial-text\",\r\n  dialCurrentClass = \"dial-current\",\r\n  viewBox = \"0 0 100 100\",\r\n\r\n  //defaults for all dials if individual values not set\r\n  defaultColor = \"#ffffff\",\r\n  defaultStroke = 2,\r\n  defaultInitialValue = 0,\r\n  defaultLineCap = \"round\", //[round | butt | square]\r\n  defaultArc = 300,\r\n  defaultOrientation = 0,\r\n  defaultMaxValue = 100,\r\n  defaultMinValue = 0,\r\n  defaultColorSchedule = function(value) {\r\n    switch (true) {\r\n      case value < 25:\r\n        return \"blue\";\r\n      case value >= 25 && value < 50:\r\n        return \"green\";\r\n      case value >= 50 && value < 75:\r\n        return \"yellow\";\r\n      case value >= 75:\r\n        return \"red\";\r\n    }\r\n  },\r\n\r\n  label = function(val) {\r\n    return Math.round(val);\r\n  }\r\n}) {\r\n  /**\r\n   * Normalizes the angle to between 0 and 359\r\n   * @param {Nnteger} value - angle\r\n   * @return {number} - Normalized angle\r\n   */\r\n  const normalizeAngle = value => {\r\n    if (value >= 0 && value < 360) return value;\r\n    if (value > 359) return value - 360;\r\n    if (value < 0) return 360 + value;\r\n  };\r\n\r\n  const SVG_ORIG = \"http://www.w3.org/2000/svg\";\r\n\r\n  let _container = document.getElementById(container),\r\n    dials = [];\r\n\r\n  /**\r\n   * Creates SVG DOM element - including nesting dials, text etc.  Returns single SVGElement\r\n   * @param {String} tag The SVG element type name\r\n   * @param {Object} opts The svg attributes\r\n   * @param {Array} nestedDials An array of nested dials or text\r\n   * @return {SVGElement} The SVG element\r\n   */\r\n  const buildSVG = ({ tag, opts, nestedDials }) => {\r\n    let svg = document.createElementNS(SVG_ORIG, tag);\r\n\r\n    for (var opt in opts) {\r\n      svg.setAttribute(opt, opts[opt]);\r\n    }\r\n\r\n    if (nestedDials) {\r\n      nestedDials.forEach(function(dial) {\r\n        svg.appendChild(dial);\r\n      });\r\n    }\r\n\r\n    return svg;\r\n  };\r\n\r\n  /**\r\n   * Translates percentage value to angle. e.g. If gauge span angle is 180deg, then 50%\r\n   * will be 90deg\r\n   */\r\n  const getAngle = (percentage, arcAngle) => {\r\n    return (percentage * arcAngle) / 100;\r\n  };\r\n\r\n  /**\r\n   * Checks if user has entered a custom value for a given property on a given dial\r\n   * If not then default value applied\r\n   * @param {Objectr} opts - User created options for each dial\r\n   * @param {String} prop - Property to check\r\n   * @param {*} defaultProp - Default property to apply\r\n   */\r\n  const checkUserProp = (opts, prop, defaultProp) => {\r\n    return opts && opts.hasOwnProperty(prop) ? opts[prop] : defaultProp;\r\n  };\r\n\r\n  /**\r\n   * Limits value generated to given min/max values set by user\r\n   */\r\n  const limitValue = (value, min, max) => {\r\n    var val = Number(value);\r\n    if (val > max) return max;\r\n    if (val < min) return min;\r\n    return val;\r\n  };\r\n\r\n  /**\r\n   * Changes given value to percentage based on min / max\r\n   */\r\n  const getValueInPercentage = (value, min, max) => {\r\n    var newMax = max - min,\r\n      newVal = value - min;\r\n    return (100 * newVal) / newMax;\r\n  };\r\n\r\n  /**\r\n   * Gets cartesian points for a specified radius and angle (in degrees)\r\n   * @param {Number} centerX  The center x coord\r\n   * @param {Number} centerY  The center y coord\r\n   * @param {Number} radius  The radius of the circle\r\n   * @param {Number} angle The angle in degrees\r\n   * @return {Object} An object with x,y coords\r\n   */\r\n  const getCartesianPoints = (centerX, centerY, radius, angle) => {\r\n    var rad = (angle * Math.PI) / 180;\r\n    return {\r\n      x: Math.round((centerX + radius * Math.cos(rad)) * 1000) / 1000,\r\n      y: Math.round((centerY + radius * Math.sin(rad)) * 1000) / 1000\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Takes in radius and start and end angles and returns x,y points for start and end of dial\r\n   * @param {Number} radius radis of circle\r\n   * @param {Number} startAngle angle of start point\r\n   * @param {Number} endAngle andgle of end point\r\n   * @return {Object} AN oject with x,y values for start and end points of dial\r\n   */\r\n  const getDialCoords = (radius, startAngle, endAngle) => {\r\n    var cx = dialX,\r\n      cy = dialY;\r\n    return {\r\n      end: getCartesianPoints(cx, cy, radius, endAngle),\r\n      start: getCartesianPoints(cx, cy, radius, startAngle)\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Generates the path string to draw an svg path of the dial radius.  Takes a flag to determeine\r\n   * if drawing the larger or smaller of a given arc on a circle\r\n   * @param {Number} radius - radius of circle\r\n   * @param {Number} startAngle - angle of start point\r\n   * @param {Number} endAngle - angle of end point\r\n   * @param {bool} useLargeArc - boolean the decide to use larger of two given arcs\r\n   * @return {String} An svg path string\r\n   */\r\n  const pathString = (radius, startAngle, endAngle, useLargeArc) => {\r\n    var coords = getDialCoords(radius, startAngle, endAngle),\r\n      start = coords.start,\r\n      end = coords.end,\r\n      largeArcFlag = typeof useLargeArc === \"undefined\" ? 1 : useLargeArc;\r\n\r\n    return [\r\n      \"M\",\r\n      start.x,\r\n      start.y,\r\n      \"A\",\r\n      radius,\r\n      radius,\r\n      0,\r\n      largeArcFlag,\r\n      1,\r\n      end.x,\r\n      end.y\r\n    ].join(\" \");\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param {object} options - Animation options\r\n   * @param {number} options.duration - duration in seconds of anumation\r\n   * @param {number} options.start - start angle of dial\r\n   * @param {number} options.end - end angle of dial\r\n   * @param {function} options.step - fucntion to execute on each anuimation step\r\n   * @param {function} options.easing - function to execute for the type of easing\r\n   */\r\n  const animateDial = options => {\r\n    let duration = options.duration,\r\n      currentIteration = 1,\r\n      iterations = 60 * duration,\r\n      start = options.start || 0,\r\n      end = options.end,\r\n      change = end - start,\r\n      step = options.step,\r\n      easing =\r\n        options.easing ||\r\n        function easeInOutCubic(pos) {\r\n          if ((pos /= 0.5) < 1) return 0.5 * Math.pow(pos, 3);\r\n          return 0.5 * (Math.pow(pos - 2, 3) + 2);\r\n        };\r\n\r\n    function animate() {\r\n      let progress = currentIteration / iterations,\r\n        value = change * easing(progress) + start;\r\n      step(value, currentIteration);\r\n      currentIteration += 1;\r\n\r\n      if (progress < 1) {\r\n        requestAnimationFrame(animate);\r\n      }\r\n    }\r\n    requestAnimationFrame(animate);\r\n  };\r\n\r\n  /**\r\n   * Draws change in dial value\r\n   * @param {Number} value - value to change to\r\n   * @param {SVGElement} svg_text - Text svg element to update\r\n   * @param {SVGElement} svg_path - Path svg element to update\r\n   */\r\n  const updateDial = (value, svg_text, svg_path) => {\r\n    let newVal = getValueInPercentage(\r\n      value,\r\n      svg_path.minValue,\r\n      svg_path.maxValue\r\n    );\r\n    let angle =\r\n      svg_path.startAngle > svg_path.endAngle\r\n        ? normalizeAngle(\r\n            getAngle(\r\n              newVal,\r\n              360 - Math.abs(svg_path.startAngle - svg_path.endAngle)\r\n            )\r\n          )\r\n        : normalizeAngle(\r\n            getAngle(newVal, Math.abs(svg_path.startAngle - svg_path.endAngle))\r\n          );\r\n\r\n    // this is because we are using arc greater than 180deg\r\n    let useLargeArc = angle <= 180 ? 0 : 1;\r\n\r\n    svg_text.textContent = newVal;\r\n\r\n    svg_path.svg.setAttribute(\r\n      \"d\",\r\n      pathString(\r\n        svg_path.radius,\r\n        svg_path.startAngle,\r\n        angle + svg_path.startAngle,\r\n        useLargeArc\r\n      )\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Updates color of dails based on value and colorSchedule\r\n   * @param {Number} value - DIal or text value to change to\r\n   * @param {Number} duration - Duration of animation\r\n   * @param {SVGElement} ring - WHich dial to update\r\n   */\r\n  const setColor = (value, duration, ring) => {\r\n    let color = checkUserProp(\r\n        ring,\r\n        \"colorSchedule\",\r\n        defaultColorSchedule\r\n      )(value),\r\n      dur = duration * 1000,\r\n      pathTransition = \"stroke \" + dur + \"ms ease\";\r\n    // textTransition = \"fill \" + dur + \"ms ease\";\r\n\r\n    ring.svg.style.stroke = color;\r\n    ring.svg.style.transition = pathTransition;\r\n    /*\r\n    gaugeValueElem.style = [\r\n      \"fill: \" + c,\r\n      \"-webkit-transition: \" + textTransition,\r\n      \"-moz-transition: \" + textTransition,\r\n      \"transition: \" + textTransition,\r\n    ].join(\";\");\r\n    */\r\n  };\r\n\r\n  /**\r\n   * Builds each dial and text assoicated with it.\r\n   * Checks for dial specific options and if not found then reverts to global defaults set.\r\n   * Creates object with SVGElement and all user options\r\n   */\r\n  const initializeDial = () => {\r\n    for (let i = 0; i < numberDials; i++) {\r\n      //Check if custom values for dials exist otherwise use defaults\r\n      let orientation =\r\n        checkUserProp(\r\n          individualDialOpts[i],\r\n          \"orientation\",\r\n          defaultOrientation\r\n        ) - 90;\r\n      let stroke = checkUserProp(\r\n        individualDialOpts[i],\r\n        \"stroke\",\r\n        defaultStroke\r\n      );\r\n      let color = checkUserProp(individualDialOpts[i], \"color\", defaultColor);\r\n      let arc = checkUserProp(individualDialOpts[i], \"arc\", defaultArc);\r\n      let lineCap = checkUserProp(\r\n        individualDialOpts[i],\r\n        \"lineCap\",\r\n        defaultLineCap\r\n      );\r\n      let minValue = checkUserProp(\r\n        individualDialOpts[i],\r\n        \"minValue\",\r\n        defaultMinValue\r\n      );\r\n      let maxValue = checkUserProp(\r\n        individualDialOpts[i],\r\n        \"maxValue\",\r\n        defaultMaxValue\r\n      );\r\n      let colorSchedule = checkUserProp(\r\n        individualDialOpts[i],\r\n        \"colorSchedule\",\r\n        defaultColorSchedule\r\n      );\r\n\r\n      //Compensate for stroke width when applying offset for nested dials\r\n      let strokeOffset = individualDialOpts\r\n        .slice(0, i)\r\n        .map(e => {\r\n          return e.hasOwnProperty(\"stroke\") ? e.stroke : defaultStroke;\r\n        })\r\n        .reduce((a, c) => a + c, 0);\r\n\r\n      //Get angles and radii for dials\r\n      let startAngle = normalizeAngle(orientation + (360 - arc) / 2);\r\n      let endAngle = normalizeAngle(startAngle + arc);\r\n      let angle = getAngle(100, 360 - Math.abs(startAngle - endAngle));\r\n      let useLargeArc =\r\n        startAngle < endAngle ? (angle >= 180 ? 0 : 1) : angle <= 180 ? 0 : 1;\r\n      let newRadius = radius - strokeOffset - multiDialOffset * i;\r\n\r\n      /*\r\n        Create svg path and text\r\n      */\r\n      let dialText = {\r\n          svg: buildSVG({\r\n            tag: \"text\",\r\n            opts: {\r\n              x: 50,\r\n              y: 50,\r\n              fill: \"#999\",\r\n              class: dialTextClass,\r\n              \"font-size\": \"100%\",\r\n              \"font-family\": \"sans-serif\",\r\n              \"font-weight\": \"normal\",\r\n              \"text-anchor\": \"middle\",\r\n              \"alignment-baseline\": \"middle\",\r\n              \"dominant-baseline\": \"central\"\r\n            }\r\n          }),\r\n          currentValue: \"\"\r\n        },\r\n        dialPath = {\r\n          svg: buildSVG({\r\n            tag: \"path\",\r\n            opts: {\r\n              class: dialPathClass,\r\n              fill: \"none\",\r\n              stroke: \"#666\",\r\n              \"stroke-width\": 2.5,\r\n              d: pathString(newRadius, startAngle, startAngle) // value of 0\r\n            }\r\n          }),\r\n          startAngle: startAngle,\r\n          endAngle: endAngle,\r\n          radius: newRadius,\r\n          type: \"background Path\"\r\n        },\r\n        dialCurrent = {\r\n          svg: buildSVG({\r\n            tag: \"path\",\r\n            opts: {\r\n              class: dialCurrentClass,\r\n              fill: \"none\",\r\n              stroke: color,\r\n              \"stroke-width\": stroke,\r\n              \"stroke-linecap\": lineCap,\r\n              d: pathString(newRadius, startAngle, endAngle, useLargeArc)\r\n            }\r\n          }),\r\n          startAngle: startAngle,\r\n          endAngle: endAngle,\r\n          radius: newRadius,\r\n          currentValue: defaultInitialValue,\r\n          type: \"Current Value Path\",\r\n          minValue: minValue,\r\n          maxValue: maxValue,\r\n          colorSchedule: colorSchedule\r\n        };\r\n\r\n      dials.push(dialText, dialPath, dialCurrent);\r\n    }\r\n\r\n    //Composes all SVGElements to gether and adds to DOM\r\n    let dialComplete = buildSVG({\r\n      tag: \"svg\",\r\n      opts: {\r\n        viewBox: viewBox || \"0 0 100 100\",\r\n        class: dialComponentClass\r\n      },\r\n      nestedDials: dials.map(e => e.svg)\r\n    });\r\n\r\n    _container.appendChild(dialComplete);\r\n  };\r\n\r\n  const init = () => {\r\n    initializeDial();\r\n  };\r\n\r\n  init();\r\n\r\n  /**\r\n   *   PUBLIC FUNCTIONS\r\n   *\r\n   */\r\n\r\n  return {\r\n    /**\r\n     * setDialValue\r\n     *\r\n     * Update the value of a given dial\r\n     * @param {Number} val - the value to update the dial to\r\n     * @param {Integer} ring - which of the nested dials to update 0 being outside ring\r\n     * @param {boolean} animate - animate change\r\n     * @param {double} duration - the duration in seconds of animate\r\n     */\r\n    setDialValue: (val, ring, animate, duration) => {\r\n      console.log(`Dial: ${ring} - Value: ${val}`);\r\n      let svg_text = dials[3 * ring],\r\n        svg_path = dials[3 * ring + 2],\r\n        value = limitValue(val, svg_path.minValue, svg_path.maxValue);\r\n\r\n      if (defaultColor) {\r\n        setColor(value, duration, svg_path);\r\n      }\r\n\r\n      if (animate) {\r\n        animateDial({\r\n          start: svg_path.currentValue || 0,\r\n          end: value,\r\n          duration: duration || 1,\r\n          step: function(val, frame) {\r\n            svg_path.currentValue = val;\r\n            updateDial(val, svg_text, svg_path);\r\n          }\r\n        });\r\n      } else {\r\n        updateDial(val, svg_text, svg_path);\r\n      }\r\n    },\r\n\r\n    returnTestString: (thisString) =>{\r\n      \r\n    }\r\n  };\r\n}\r\n\r\nexport default MultiDial;\r\n"],"sourceRoot":""}